import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'


//==================读取配置文件====================
ext {
    cConfigTxt = 'configs.txt'

    //从配置文件加载的变量
    cStoreFile = ''
    cStorePassword = ''
    cKeyAlias = ''
    cKeyPassword = ''
    cPrjProguard = ""

    cVersionCode = ''
    cVersionName = ''

    cApkPath = ""
    cAppName = getPrjNameFromManifest()

    //加载参数配置
    initConfigs()
}

//加载参数配置
def initConfigs() {
    def Properties props = new Properties()
    def InputS = new FileInputStream(cConfigTxt)
    def b = new byte[3];
    InputS.read(b);
    if (b[0] == -17 && b[1] == -69 && b[2] == -65) {
        props.load(new InputStreamReader(InputS, 'UTF-8'))
    } else {
        props.load(new InputStreamReader(InputS, 'GBK'))
    }

    cStoreFile = props['storeFile']
    cStorePassword = props['storePassword']
    cKeyAlias = props['keyAlias']
    cKeyPassword = props['keyPassword']
    cPrjProguard = props['PrjProguard']

    cVersionCode = props['VersionCode']
    cVersionName = props['VersionName']


    cApkPath = props['ApkPath']
    cAppName = props['AppName']
}

//从包名获取项目名
def getPrjNameFromManifest() {
    def manifestFile = file('src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("package=\"(\\S+)\\.(\\S+)\\.(\\S+)\"");
    def matcher = pattern.matcher(manifestFile.getText('UTF-8'))
    matcher.find()
    return matcher.group(3)
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
android {
    signingConfigs {
        debug {
            storeFile file(cStoreFile)
            storePassword cStorePassword
            keyAlias cKeyAlias
            keyPassword cKeyPassword
        }

        release {
            storeFile file(cStoreFile)
            storePassword cStorePassword
            keyAlias cKeyAlias
            keyPassword cKeyPassword
        }
    }
    compileSdkVersion rootProject.versions.compileSDK
    buildToolsVersion rootProject.versions.buildTools
    defaultConfig {
        minSdkVersion rootProject.versions.minSDK
        targetSdkVersion rootProject.versions.targetSDK
        applicationId cApplicationId
        signingConfig signingConfigs.release;
        ndk { abiFilters "armeabi", "armeabi-v7a", "x86", "mips" }//让64位的操作系统可以兼容32位的库文件

        // tray contentProvider鉴权
        // add this to set a unique tray authority based on your applicationId
        resValue "string", "tray__authority", "${applicationId}.tray"
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    //忽略警告信息
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {//重要，勿动
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml' //指向AndroidManifest
            java.srcDirs = ['src/main/java']                //指向java文件夹
            resources.srcDirs = ['src/main/res']            //指向res文件夹
            renderscript.srcDirs = ['src/main/java']        //[指向java文件夹]该类型的指向未搜索到确切含义的目的，待议
            res.srcDirs = ['src/main/res']                  //指向res文件夹
            assets.srcDirs = ['src/main/assets']            //指向assets文件夹
            jniLibs.srcDirs = ['libs', 'jniLibs']           //指向jni库文件位置，很重要
        }
    }

    buildTypes {
        debug {
            //
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true//是否优化资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), cPrjProguard
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {

            project.getTasksByName("assemble${variant.name.capitalize()}", false).each { task ->
                task.doLast {
                    def outdir = "${project.buildDir}\\outputs\\"

                    //备份mapping.txt
                    def taskname = task.name.substring('assemble'.length(), task.name.length() - 'Release'.length())
                    def mapdir = "${outdir}mapping\\${taskname}\\release\\"
                    def mapsrc = "mapping.txt"
                    def mapdst = "mapping_${cVersionCode}_${cVersionName}.txt"

                    def m = new File(mapdir, mapsrc)
                    if (m.exists()) {
                        def d = new File(cApkPath, mapdst)
                        if (!d.exists()) {
                            m.renameTo(d)
                        }
                    }

                    //清理输出目录
                    def dir = new File(outdir)
                    if (dir.exists()) {
                        dir.deleteDir()
                    }
                }
            }

            //修改输出文件名
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name

                    if (cApkPath != null && !cApkPath.equals("")) {
                        fileName = "${cAppName}.apk"
                    }

                    if (cApkPath == null || cApkPath.equals("")) {
                        cApkPath = outputFile.parent
                    }

                    output.outputFile = new File(cApkPath, fileName)
                }
            }
        }
    }

    compileOptions {
        targetCompatibility 1.7
        sourceCompatibility 1.7
    }
}



//修改VersionCode
task('increaseVersionCode') << {
    def manifestFile = file('src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText('UTF-8'))
    matcher.find()
    def manifestContent = matcher.replaceAll("android:versionCode=\"${cVersionCode}\"")
    manifestFile.write(manifestContent, 'UTF-8')
}

//修改VersionName
task('incrementVersionName') << {
    def manifestFile = file('src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText('UTF-8'))
    matcher.find()
    def manifestContent = matcher.replaceAll("android:versionName=\"${cVersionName}\"")
    manifestFile.write(manifestContent, 'UTF-8')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('generate') &&
            task.name.endsWith('ReleaseBuildConfig')
    ) {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}

greendao {
    // GreenDao数据库配置
    schemaVersion 1
    daoPackage 'com.juxin.predestinate.bean.db'
    targetGenDir 'src/main/java'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
    compile project(':library')
    //GreenDao数据库
    compile 'org.greenrobot:greendao:3.2.0'
    compile 'org.greenrobot:greendao-generator:3.2.0'

//    compile 'com.google.dagger:dagger:2.9'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.9'
//    compile ('com.squareup.sqlbrite:sqlbrite:1.1.1'){
//        exclude group: 'io.reactivex', module: 'rxjava'
//    }
}
