
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.bugtags.library.plugin'
apply plugin: 'AndResGuard'

//Bugtags 插件配置
bugtags {
    //自动上传符号表功能配置，如果需要根据 build varint 配置，请参考帮助中心->符号表->Android 符号表->配置自动上传符号表
    appKey "882cc0b7fdb25bed47b9fa577ea684f0"       //这里是你的 appKey
    appSecret "01016699d806e927eabfa4c26777237b"    //这里是你的 appSecret，管理员在设置页可以查看
    mappingUploadEnabled true

    //网络跟踪功能配置(企业版)
    trackingNetworkEnabled true
}

android {
    useLibrary 'org.apache.http.legacy'

    signingConfigs {
        debug {
            storeFile file(cStoreFile)
            storePassword cStorePassword
            keyAlias cKeyAlias
            keyPassword cKeyPassword
        }

        release {
            storeFile file(cStoreFile)
            storePassword cStorePassword
            keyAlias cKeyAlias
            keyPassword cKeyPassword
        }
    }
    compileSdkVersion rootProject.versions.compileSDK
    buildToolsVersion rootProject.versions.buildTools
    defaultConfig {
        minSdkVersion rootProject.versions.minSDK
        targetSdkVersion rootProject.versions.targetSDK
        applicationId cApplicationId
        signingConfig signingConfigs.release;
        ndk { abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86" }//让64位的操作系统可以兼容32位的库文件
        multiDexEnabled true// 65535限制
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    //忽略警告信息
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {//重要，勿动
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml' //指向AndroidManifest
            java.srcDirs = ['src/main/java']                //指向java文件夹
            resources.srcDirs = ['src/main/res']            //指向res文件夹
            renderscript.srcDirs = ['src/main/java']        //[指向java文件夹]该类型的指向未搜索到确切含义的目的，待议
            res.srcDirs = ['src/main/res']                  //指向res文件夹
            assets.srcDirs = ['src/main/assets']            //指向assets文件夹
            jniLibs.srcDirs = ['libs', 'jniLibs']           //指向jni库文件位置，很重要
        }
    }

    buildTypes {
        debug {
            //
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true//是否优化资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), cPrjProguard
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            def apkPath = rootProject.cApkPath;
            project.getTasksByName("assemble${variant.name.capitalize()}", false).each { task ->
                task.doLast {
                    def outdir = "${project.buildDir}\\outputs\\"

                    //备份mapping.txt
                    def taskname = task.name.substring('assemble'.length(), task.name.length() - 'Release'.length())
                    def mapdir = "${outdir}mapping\\${taskname}\\release\\"
                    def mapsrc = "mapping.txt"
                    def mapdst = "mapping_${cVersionCode}_${cVersionName}.txt"

                    def m = new File(mapdir, mapsrc)
                    if (m.exists()) {
                        def d = new File(apkPath, mapdst)
                        if (!d.exists()) {
                            m.renameTo(d)
                        }
                    }

                    //清理输出目录
                    def dir = new File(outdir)
                    if (dir.exists()) {
                        dir.deleteDir()
                    }
                }
            }

            //修改输出文件名
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name
                    if (apkPath != null && apkPath != "") {
                        fileName = "${cAppName}.apk"
                    }

                    if (apkPath == null || apkPath == "") {
                        apkPath = outputFile.parent
                    }
                    output.outputFile = new File(apkPath, fileName)
                }
            }
        }
    }

    compileOptions {
        targetCompatibility 1.7
        sourceCompatibility 1.7
    }
}


andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    // 当你使用v2签名的时候，7zip压缩是无法生效的。
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    whiteList = [
            // for your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            // umeng share for facebook
            "R.layout.*facebook*",
            "R.id.*facebook*",
            // umeng share for messager
            "R.layout.*messager*",
            "R.id.*messager*",
            // umeng share commond
            "R.id.progress_bar_parent",
            "R.id.webView"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.3'
        //path = "/usr/local/bin/7za"
    }
}

//修改VersionCode
task('increaseVersionCode') << {
    def manifestFile = file('src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText('UTF-8'))
    matcher.find()
    def manifestContent = matcher.replaceAll("android:versionCode=\"${cVersionCode}\"")
    manifestFile.write(manifestContent, 'UTF-8')
}

//修改VersionName
task('incrementVersionName') << {
    def manifestFile = file('src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText('UTF-8'))
    matcher.find()
    def manifestContent = matcher.replaceAll("android:versionName=\"${cVersionName}\"")
    manifestFile.write(manifestContent, 'UTF-8')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'preReleaseBuild') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile project(':library')

    //bugtags统计
    compile 'com.bugtags.library:bugtags-lib:latest.integration'

    //友盟统计
    compile 'com.umeng.analytics:analytics:latest.integration'
    //dagger2依赖注入
    compile 'com.google.dagger:dagger:2.10'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.10'
    //sqlbrite数据库
    compile 'com.squareup.sqlbrite:sqlbrite:1.1.1'
}